{"version":3,"sources":["components/Card.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","title","text","className","style","marginBottom","children","margin","href","App","width","height","xmlns","preserveAspectRatio","focusable","role","aria-label","fill","x","y","dy","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qOAGe,SAASA,EAAKC,GAAQ,IAC3BC,EAAgBD,EAAhBC,MAAOC,EAASF,EAATE,KACf,OACE,yBACEC,UAAU,UACVC,OAAgB,GAAD,OAAK,GAAL,OAAgB,CAAEC,aAAa,GAAD,OAAK,GAAL,SAE5CL,EAAMM,SACP,yBAAKH,UAAU,aACb,wBAAIA,UAAU,SAASC,MAAO,CAAEG,OAAO,GAAD,OAAK,GAAL,QACnCN,GAEH,yBAAKE,UAAU,cAAcC,MAAO,CAAEG,OAAO,GAAD,OAAK,GAAL,QACzCL,GAEH,4BAAQM,KAAK,IAAIL,UAAU,oBAAoBC,MAAO,CAAEG,OAAO,GAAD,OAAK,GAAL,QAA9D,kBCsBOE,MAnCf,WACE,OACE,yBAAKN,UAAU,OACb,yBAAKA,UAAU,gDACb,kBAACJ,EAAD,CACEE,MAAM,aACNC,KAAK,kGAEL,yBACEC,UAAU,kCACVO,MAAM,OACNC,OAAO,MACPC,MAAM,6BACNC,oBAAoB,iBACpBC,UAAU,QACVC,KAAK,MACLC,aAAW,0BAEX,8CACA,0BAAMN,MAAM,OAAOC,OAAO,OAAOM,KAAK,YACtC,0BAAMC,EAAE,MAAMC,EAAE,MAAMF,KAAK,UAAUG,GAAG,QAAxC,eAMJ,kBAACrB,EAAD,CACEE,MAAM,0BACNC,KAAK,8ECrBKmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.08208eea.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nexport default function Card(props) {\n  const { title, text } = props;\n  return (\n    <div\n      className=\"ui card\"\n      style={({ width: `${15}rem` }, { marginBottom: `${70}px` })}\n    >\n      {props.children}\n      <div className=\"card-body\">\n        <h2 className=\"header\" style={{ margin: `${20}px` }}>\n          {title}\n        </h2>\n        <div className=\"description\" style={{ margin: `${20}px` }}>\n          {text}\n        </div>\n        <button href=\"#\" className=\"ui primary button\" style={{ margin: `${20}px` }}>\n          Go somewhere\n        </button>\n      </div>\n    </div>\n  );\n}\n\nCard.propTypes = {\n  title: PropTypes.string.isRequired,\n  text: PropTypes.string.isRequired,\n  children: PropTypes.string.isRequired,\n};\n","import React from \"react\";\nimport \"./App.css\";\n\nimport Card from \"./components/Card\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"ui raised very padded text container segment\">\n        <Card\n          title=\"Card title\"\n          text=\"Some quick example text to build on the card title and make up the bulk of the card's content.\"\n        >\n          <svg\n            className=\"bd-placeholder-img card-img-top\"\n            width=\"100%\"\n            height=\"180\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n            preserveAspectRatio=\"xMidYMid slice\"\n            focusable=\"false\"\n            role=\"img\"\n            aria-label=\"Placeholder: Image cap\"\n          >\n            <title>Placeholder</title>\n            <rect width=\"100%\" height=\"100%\" fill=\"#868e96\"></rect>\n            <text x=\"35%\" y=\"50%\" fill=\"#dee2e6\" dy=\".3em\">\n              Image cap\n            </text>\n          </svg>\n        </Card>\n\n        <Card\n          title=\"Special title treatment\"\n          text=\"With supporting text below as a natural lead-in to additional content.\"\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}